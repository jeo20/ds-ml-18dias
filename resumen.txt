DÍA 6 - PANDAS - PARTE I
    IMPORTAR PANDAS
        import pandas as pd
    
    TIPOS DE DATOS
    **************
    Series (columnas): Las series son un array de una sola dimensión, con etiquetas para sus elementos.

    DataFrames (tablas): Un DataFrame es una tabla bidimensional, con etiquetas en filas y columnas, y si tomamos cualquier columna de un DataFrame por separado,
    vamos a tener entonces una serie que es el segundo elemento de pandas.

        CREAR DATAFRAME
            datos = {"nombre":["Pedro","Juan","Lorena"], "edad": [25,39,33]}
            df=pd.DataFrame(datos)

        CONSULTAR TIPO DE DATO DEL DATAFRAME
            type(df)
            pandas.core.frame.DataFrame
        
        ACCEDER A UNA SERIE
            df["nombre"]
            cuando tengas string en una serie, pandas lo define como object

        CONSULTAR TIPO DE DATO DE UNA SERIE
            type(df.nombre)
    
    DATAFRAMES
    **********
        IMPORTO DE UN ARCHIVO CSV  
            import pandas as pd
            df = pd.read_csv("RUTA\\archivo.csv")
        
        METODOS Y ATRIBUTOS
            METODOS ()
            *********
            df.head() # muestra los primeros 5 registros
            df.tail() # muestra los últimos 5 registros
            df.info() # muestra información sobre el dataframe
            df.describe() # muestra estadísticas descriptivas del dataframe

            ATRIBUTOS NO TIENE ()
            *********************
            df.columns # muestra las columnas del dataframe
            df.index # muestra los índices del dataframe
            df.shape # muestra el número de filas y columnas del dataframe
            df.size # muestra el número total de elementos del dataframe
            df.ndim # muestra el número de dimensiones del dataframe

    SERIES
    ******
        IMPORTO DE UN ARCHIVO CSV  
            import pandas as pd
            df = pd.read_csv("RUTA\\archivo.csv")

        ELEGIMOS UNA SERIE DEL DATAFRAME
            serie = df["region"]
            serie.head()

        CREAR UNA SERIE A PARTIR DE OBJETOS DE PYTHON COMO LISTAS
            datos = [10, 20, 30, 40, 50]
            serie2 = pd.Series(datos)

        PERSONALIZAR INDICES DE UNA SERIE
            indices = ["a", "b", "c", "d", "e"]
            serie2 = pd.Series(datos,indices) # debe coincidir la cantidad de indices con la cantidad de elementos de la serie
            serie2["b"] # devuelve el valor 20
            type(serie2) # devuelve pandas.core.series.Series
            type(serie2["b"]) # devuelve numpy.int64
        
        CREANDO UNA SERIE DESDE UN DICCIONARIO
            capitales = {"España": "Madrid", "Perú": "Lima", "Argentina": "Buenos Aires"}
            serie3 = pd.Series(capitales)
            Como puedes ver, en estos casos las claves(nombres de los paises) se transforman automáticamente en índices alfabéticos.
            serie3["Perú"] # devuelve 'Lima'
    
    OPERACIONES BASICAS CON SERIES
    ******************************
        serie = pd.Series([10, 20, 30, 40, 50])
        serie[0] = serie[0] + 10 # suma 10 al primer elemento de la serie
        serie = serie + 10 # suma 10 a todos los elementos de la serie
        serie = serie * 2 # multiplica por 2 a cada uno de los elementos de la serie

    LIMPIEZA DE DATOS
    *****************
        data = {"Id_producto": [1001, 1002, 1003, 1003],
           "Cantidad_vendida": [30, None, 25, 25],
                     "Precio": [20.5, 15.0, None, 22.5]}
        df = pd.DataFrame(data)
        
        PASO 1 EXPLORACION DE DATOS
        df.head()
        
            Id_producto	Cantidad_vendida	Precio
            0	1001	30.0	            20.5
            1	1002	NaN	                15.0
            2	1003	25.0	            NaN
            3	1003	25.0	            22.5

        df.info() 
            <class 'pandas.core.frame.DataFrame'>
            RangeIndex: 4 entries, 0 to 3
            Data columns (total 3 columns):
            #   Column            Non-Null Count  Dtype  
            ---  ------            --------------  -----  
            0   Id_producto       4 non-null      int64  
            1   Cantidad_vendida  3 non-null      float64 # 1 valor nulo
            2   Precio            3 non-null      float64 # 1 valor nulo
            dtypes: float64(2), int64(1)
            memory usage: 228.0 bytes


        PASO 2 IDENTIFICAR VALORES FALTANTES (NULOS)
        df.isnull() # devuelve el dataframe con valores booleanos
            Id_producto	Cantidad_vendida	Precio
            0	False	False	            False
            1	False	True	            False
            2	False	False	            True
            3	False	False	            False

        df.isnull().sum() # devuelve el total de cada columna
            Id_producto         0
            Cantidad_vendida    1
            Precio              1
            dtype: int64
        
        PASO 2 MANEJO DE VALORES FALTANTES ( analizar que conviene en cada situacion, eliminar o reemplazar valores)
            Opción 1 - Eliminar registros que contienen valores nulos
                df_eliminados = df.dropna()

            Opción 2: Reemplazar los Valores Nulos con Otros Valores                
                valores_nuevos = {"Cantidad_vendida": 0, "Precio":df["Precio"].mean()}
                df_rellenados = df.fillna(valores_nuevos)
        
        PASO 3 CORRECCION DE TIPO DE DATOS
            df_rellenados["Cantidad_vendida"] = df_rellenados["Cantidad_vendida"].astype(int)


        PASO 4 ELIMINACION DE DUPLICADOS
            df_unicos = df_rellenados.drop_duplicates() # sin parametros busca registros completos

            df_unicos = df_rellenados.drop_duplicates(subset="Id_producto") # busca duplicados en la columna Id_producto

    FILTRADO DE SERIES EN PANDAS
    ****************************
        FILTRADO POR NUMEROS
            serie = pd.Series([5, 10, 15, 20, 25])

            filtro = serie > 15 # FILTRO PARA IDENTIFICAR LOS VALORES MAYORES A 15
            serie_filtrada = serie[filtro]
            serie_filtrada
                3    20
                4    25
                dtype: int64
            
            filtro
                0    False
                1    False
                2    False
                3     True
                4     True
                dtype: bool

            Como puedes ver, lo que hicimos fue crear una nueva **Serie** que contiene **valores booleanos** (*True* para elementos que cumplen la condición, y *False* para los que no).
            Luego, usamos la serie **filtro** para "indexar" solo los elementos de **serie** que son *True*, y que por lo tanto son mayores que 15. 
            De alguna manera este es el mismo proceso de indexación que aplicábamos antes, porque lo que pones en las llaves cuadradas es el valor que quieres obtener,
            solo que al hacerlo de esta manera **obtenemos más de un valor que cumple con el criterio de indexación**, y a ese proceso le llamamos **filtrado**.

        FILTRADO POR TEXTO
            serie2 = pd.Series(["banana", "pera", "melon", "manzana"])
            serie2
                0     banana
                1       pera
                2      melon
                3    manzana
                dtype: object

            type(serie2)
                pandas.core.series.Series
            
            type(serie2[0])
                str

            filtro2 = serie2.str.contains("m")
            filtro2
                0    False
                1    False
                2     True
                3     True
                dtype: bool    

            serie2[filtro2]
                2      melon
                3    manzana
                dtype: object

    AGREGACION DE SERIES EN PANDAS
    ******************************
        Básicamente una agregación es una **operación que combina varios valores de datos en un solo valor representativo**, como un promedio o una suma total.
        
        numeros = pd.Series([10, 20, 30, 40, 50])
        
        PROMEDIO MEAN()
            promedio = numeros.mean()
            print(f"El promedio es {promedio}")
                El promedio es 30.0
        
        SUMA SUM()
            total = numeros.sum()
            total
                np.int64(150)
        
        MAXIMO MAX()
            maximo = numeros.max()
            maximo
                np.int64(50)
        
        MINIMO MIN()
            minimo = numeros.min()
            minimo
                np.int64(10)

DÍA 7 - PANDAS - PARTE II
    TRABAJAR CON DATAFRAMES
    ***********************
        AGREGAR UNA COLUMNA A UN DATAFRAME
            df["Salario"] = [30000,45000,38000,32000]
        
        MODIFICAR COLUMNAS
            df["Salario"] = df["Salario"] + 2000
        
        GUARDO UNA SERIE EN UNA VARIABLE
            nombres = df["Nombre"]
        
        FILTRO DE UN DATAFRAME
            mayores_25 = df[df["Edad"] > 25]

        COMPROBAR TIPO DE DATO
            type(mayores_25)

    ORDENAR Y AGRUPAR DATAFRAMES EN PANDAS
    **************************************
        ORDENAR POR UNA COLUMNA ESPECIFICA(ETIQUETA)
            df_ordenado = df.sort_values(by='rating')
            df_ordenado.head(10)

        ORDENAR DESCENDENTE DE MAYOR A MENOR
            df_ordenado = df.sort_values(by='rating', ascending=False)
            df_ordenado.head(10)

        ORDENAR POR MAS DE UNA COLUMNA (usamos [] para usar una lista)
            df_ordenado = df.sort_values(by=['rating', 'recaudación(M)'], ascending=False)
            df_ordenado.head(10)

        AGRUPACION DE DATAFRAMES   
            df_agrupado = df.groupby('género')['rating'].mean()
            df_agrupado
        
        AGRUPACION POR AÑO, RECAUDACION
            df_agrupado = df.groupby('año')['recaudación(M)'].sum()

        VER LOS PRIMEROS 10 AÑOS
            df_agrupado.sort_values(ascending=False).head(10)

    FUSIONAR DATAFRAMES EN PANDAS CON MERGE()
    *****************************************
    La función merge() permite combinar DataFrames basándose en valores comunes de una o más columnas.

        df1           
                ID	Nombre
            0	1	Ana
            1	2	Luis
            2	3	Carlos

        df2            
                ID	Edad
            0	1	25
            1	2	30
            2	4	22

         MERGE()   
            df_combinado = pd.merge(df1, df2, on='ID')
            df_combinado
                ID	Nombre	Edad
            0	1	Ana	    25
            1	2	Luis	30
        
        INNER (SOLO LOS INDICES QUE COINCIDEN)
            df_combinado = pd.merge(df1, df2, on='ID', how='inner')
            df_combinado
                ID	Nombre	Edad
            0	1	Ana	    25
            1	2	Luis	30

        OUTER (TODOS LOS DATOS)
            df_combinado = pd.merge(df1, df2, on='ID', how='outer')
            df_combinado
            	ID	Nombre	Edad
            0	1	Ana	    25.0
            1	2	Luis	30.0
            2	3	Carlos	NaN
            3	4	NaN	    22.0

        LEFT (INCLUYE TODOS LOS DATOS EL DATAFRAME DE LA IZQUIERDA)
            df_combinado = pd.merge(df1, df2, on='ID', how='left')
            df_combinado
            	    ID	Nombre	Edad
                0	1	Ana	    25.0
                1	2	Luis	30.0
                2	3	Carlos	NaN

        RIGHT (INCLUYE TODOS LOS DATOS EL DATAFRAME DE LA DERECHA)        
            df_combinado = pd.merge(df1, df2, on='ID', how='right')
            df_combinado
            	    ID	Nombre	Edad
                0	1	Ana	    25
                1	2	Luis	30
                2	4	NaN	    22
        LEF INDEX Y RIGHT INDEX (UNE LOS DF MANENIENDO LOS INDICES ORIGINALES)
            df_indexado = pd.merge(df1, df2, left_index=True, right_index=True)
            df_indexado
            	    ID_x	Nombre	ID_y	Edad
                0	1	    Ana	     1	    25
                1	2	    Luis	 2	    30
                2	3	    Carlos	 4	    22

    COMBINAR DATAFRAMES EN PANDAS CON JOIN()
    ****************************************
    Combinar consiste en unir dos dataframes pero a partir de su índice, o de una columna clave, y no de columnas compartidas.
        df1 = pd.DataFrame({'Salario': [30000, 45000, 38000],
                        'Antigüedad': [9, 13, 12]},
                    index=[1, 2, 3])
        df2 = pd.DataFrame({'Ciudad': ['Madrid', 'Barcelona', 'Valencia'],
                        'Jerarquía': ['Baja', 'Alta', 'Media']},
                    index=[1, 2, 4])
        df1         
            Salario	Antigüedad
            1	30000	9
            2	45000	13
            3	38000	12
        df2
                Ciudad	    Jerarquía
            1	Madrid	    Baja
            2	Barcelona	Alta
            4	Valencia	Media

        JOIN()
            df_unido = df1.join(df2)
            df_unido
                Salario	Antigüedad	Ciudad	    Jerarquía
            1	30000	9	        Madrid	    Baja
            2	45000	13	        Barcelona	Alta
            3	38000	12	        NaN	        NaN

        JOIN() INNER
            df_unido = df1.join(df2, how='inner') # inner solo devuelve las coincidencias
            df_unido
                Salario	Antigüedad	Ciudad	Jerarquía
            1	30000	    9	    Madrid	    Baja
            2	45000	    13	    Barcelona	Alta

    CONCATENAR DATAFRAMES EN PANDAS CON CONCAT()
    ********************************************
    Concatenar consiste en unir dos o más dataframes a lo largo de un eje horizontal o vertical.
        df1 = pd.DataFrame({'Nombre': ["Juan", "Gabriela", "Elena"], 'Edad': [23, 31, 21]})
        df1       
                Nombre	    Edad
            0	Juan	    23
            1	Gabriela	31
            2	Elena	    21

        df2 = pd.DataFrame({'Nombre': ["Carmela", "Max", "Laura"], 'Edad': [34, 25, 29]})
        df2                        
                Nombre	Edad
            0	Carmela	34
            1	Max	    25
            2	Laura	29

        CONCAT()
            df_cancatenado = pd.concat([df1, df2])
            df_cancatenado            
                    Nombre	   Edad
                0	Juan	    23
                1	Gabriela	31
                2	Elena	    21
                0	Carmela	    34
                1	Max	        25
                2	Laura	    29

        AXIS = 1 (CONCATENA POR FILAS)
            axis por defecto = 0 concatena por columnas, axis = 1 concatena por filas
            df_cancatenado2 = pd.concat([df1, df2], axis=1)
            df_cancatenado2            
                    Nombre	    Edad	Nombre	Edad
                0	Juan	    23	    Carmela	34
                1	Gabriela    31	    Max	    25
                2	Elena	    21	    Laura	29
            
        REINDEXAR LOS INDICES
            df_cancatenado = pd.concat([df1, df2], ignore_index=True)
            df_cancatenado               
                    Nombre	    Edad
                0	Juan	    23
                1	Gabriela	31
                2	Elena	    21
                3	Carmela	    34
                4	Max	        25
                5	Laura	    29
        
        KEYS PERSONALIZADAS
            df_cancatenado = pd.concat([df1, df2], keys=['df1', 'df2'])
            df_cancatenado            
                     Nombre	    Edad
            df1	0	    Juan	    23
                1	    Gabriela	31
                2	    Elena	    21
            df2	0	    Carmela	    34
                1	    Max	        25
                2	    Laura	    29

            df_cancatenado = pd.concat([df1, df2], keys=['enero', 'febrero'])
            df_cancatenado
            
                    Nombre	        Edad
            enero	0	Juan	    23
                    1	Gabriela	31
                    2	Elena	    21
            febrero	0	Carmela 	34
                    1	Max     	25
                    2	Laura	    29

    DATOS DE TIEMPO EN PANDAS
    *************************
        FECHAS
            fechas = pd.Series(pd.date_range('20240101', periods=6))
            fechas
            0   2024-01-01
            1   2024-01-02
            2   2024-01-03
            3   2024-01-04
            4   2024-01-05
            5   2024-01-06
            dtype: datetime64[ns]

            type(fechas[0])
            pandas._libs.tslibs.timestamps.Timestamp

        FREQ (D=dias, M=mes, Y=año, H=hora, MIN=minutos, S=segundos)
            fechas = pd.Series(pd.date_range('20240101', periods=6, freq='D'))

        CONVERTIR A FORMATO FECHA
            
            Ticker	Fecha	Cierre	Referencia	Volumen	Rotacion	Ultimo	Alto	Bajo	Promedio
        0	ANA	02/01/2019	74.80	73.90	156300	11621188.98	74.80	75.16	72.38	74.3518
        1	ANA	03/01/2019	76.34	74.80	140331	10632703.64	76.34	76.60	74.54	75.7687
        2	ANA	04/01/2019	76.62	76.34	130309	10010838.76	76.62	77.40	76.40	76.8162
        3	ANA	07/01/2019	77.14	76.62	63349	4855724.92	77.14	77.30	75.62	76.6504
        4	ANA	08/01/2019	78.24	77.14	99300	7749464.70	78.24	78.46	77.00	78.0409

        df['Fecha'][0]
            '02/01/2019'

        type(df['Fecha'][0])
            str

        CONVIERTO COLUMNA A FORMATO FECHA
            df['Fecha'] = pd.to_datetime(df['Fecha'], format='%d/%m/%Y')
            df

        	Ticker	Fecha	Cierre	Referencia	Volumen	Rotacion	Ultimo	Alto	Bajo	Promedio
        0	ANA	2019-01-02	74.80	73.90	156300	11621188.98	74.80	75.16	72.38	74.3518
        1	ANA	2019-01-03	76.34	74.80	140331	10632703.64	76.34	76.60	74.54	75.7687
        2	ANA	2019-01-04	76.62	76.34	130309	10010838.76	76.62	77.40	76.40	76.8162
        3	ANA	2019-01-07	77.14	76.62	63349	4855724.92	77.14	77.30	75.62	76.6504
        4	ANA	2019-01-08	78.24	77.14	99300	7749464.70	78.24	78.46	77.00	78.0409

        df['Fecha'][0]
            Timestamp('2019-01-02 00:00:00')

        type(df['Fecha'][0])
            pandas._libs.tslibs.timestamps.Timestamp

        df['Fecha'][44]
            Timestamp('2019-03-05 00:00:00')

        anio = df['Fecha'][44].year
        anio
            2019
        
        mes = df['Fecha'][44].month
        mes
            3

        SUMO DIAS, MES, AÑO, HORA, MINUTOS, SEGUNDOS
            df_mas_5_dias = df['Fecha'] + pd.Timedelta(days=5)
            df_mas_5_dias
                0      2019-01-07
                1      2019-01-08
                2      2019-01-09
                3      2019-01-12
                4      2019-01-13
                        ...    
                8570   2019-12-14
                8571   2019-12-15
                8572   2019-12-16
                8573   2019-12-17
                8574   2019-12-18
                Name: Fecha, Length: 8575, dtype: datetime64[ns]